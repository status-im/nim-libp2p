name: nim-libp2p CI
on: [push, pull_request]

jobs:
  build:
    strategy:
      fail-fast: false
      max-parallel: 20
      matrix:
        branch: [v1.2.6]
        target:
          # Unit tests
          - os: linux
            cpu: amd64
            TEST_KIND: unit-tests
          - os: linux
            cpu: i386
            TEST_KIND: unit-tests
          - os: macos
            cpu: amd64
            TEST_KIND: unit-tests
          - os: windows
            cpu: i386
            TEST_KIND: unit-tests
          - os: windows
            cpu: amd64
            TEST_KIND: unit-tests
        include:
          - target:
              os: linux
            builder: ubuntu-20.04
          - target:
              os: macos
            builder: macos-10.15
          - target:
              os: windows
            builder: windows-2019
    name: '${{ matrix.target.os }}-${{ matrix.target.cpu }} (${{ matrix.branch }})'
    runs-on: ${{ matrix.builder }}
    steps:
      - name: Checkout nim-libp2p
        uses: actions/checkout@v2
        with:
          path: nim-libp2p
          submodules: true
      - name: Install build dependencies (Linux i386)
        if: runner.os == 'Linux' && matrix.target.cpu == 'i386'
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update -qq
          sudo DEBIAN_FRONTEND='noninteractive' apt-get install \
            --no-install-recommends -yq gcc-multilib g++-multilib \
            libssl-dev:i386
          mkdir -p external/bin
          cat << EOF > external/bin/gcc
          #!/bin/bash
          exec $(which gcc) -m32 "\$@"
          EOF
          cat << EOF > external/bin/g++
          #!/bin/bash
          exec $(which g++) -m32 "\$@"
          EOF
          chmod 755 external/bin/gcc external/bin/g++
          echo '${{ github.workspace }}/external/bin' >> $GITHUB_PATH

      - name: Restore MinGW-W64 (Windows) from cache
        if: runner.os == 'Windows'
        id: windows-mingw-cache
        uses: actions/cache@v2
        with:
          path: external/mingw-${{ matrix.target.cpu }}
          key: 'mingw-${{ matrix.target.cpu }}'

      - name: Restore Nim DLLs dependencies (Windows) from cache
        if: runner.os == 'Windows'
        id: windows-dlls-cache
        uses: actions/cache@v2
        with:
          path: external/dlls-${{ matrix.target.cpu }}
          key: 'dlls-${{ matrix.target.cpu }}'

      - name: Install MinGW64 dependency (Windows)
        if: >
          steps.windows-mingw-cache.outputs.cache-hit != 'true' &&
          runner.os == 'Windows'
        shell: bash
        run: |
          mkdir -p external
          curl -L "https://nim-lang.org/download/mingw$ARCH-6.3.0.7z" -o "external/mingw-${{ matrix.target.cpu }}.7z"
          7z x -y "external/mingw-${{ matrix.target.cpu }}.7z" -oexternal/
          mv external/mingw$ARCH external/mingw-${{ matrix.target.cpu }}

      - name: Install DLLs dependencies (Windows)
        if: >
          steps.windows-dlls-cache.outputs.cache-hit != 'true' &&
          runner.os == 'Windows'
        shell: bash
        run: |
          mkdir -p external
          curl -L "https://nim-lang.org/download/windeps.zip" -o external/windeps.zip
          7z x -y external/windeps.zip -oexternal/dlls-${{ matrix.target.cpu }}

      - name: Path to cached dependencies (Windows)
        if: >
          runner.os == 'Windows'
        shell: bash
        run: |
          echo "${{ github.workspace }}/external/mingw-${{ matrix.target.cpu }}/bin" >> $GITHUB_PATH
          echo "${{ github.workspace }}/external/dlls-${{ matrix.target.cpu }}" >> $GITHUB_PATH

      - name: Setup environment
        shell: bash
        run: echo '${{ github.workspace }}/nim/bin' >> $GITHUB_PATH

      - name: Get latest Nim commit hash
        id: versions
        shell: bash
        run: |
          getHash() {
            git ls-remote "https://github.com/$1" "${2:-HEAD}" | cut -f 1
          }
          nimHash=$(getHash nim-lang/Nim '${{ matrix.branch }}')
          csourcesHash=$(getHash nim-lang/csources)
          echo "::set-output name=nim::$nimHash"
          echo "::set-output name=csources::$csourcesHash"

      - name: Restore prebuilt Nim from cache
        id: nim-cache
        uses: actions/cache@v1
        with:
          path: nim
          key: "nim-${{ matrix.target.os }}-${{ matrix.target.cpu }}-${{ steps.versions.outputs.nim }}"

      - name: Restore prebuilt csources from cache
        if: steps.nim-cache.outputs.cache-hit != 'true'
        id: csources-cache
        uses: actions/cache@v1
        with:
          path: csources/bin
          key: "csources-${{ matrix.target.os }}-${{ matrix.target.cpu }}-${{ steps.versions.outputs.csources }}"

      - name: Checkout Nim csources
        if: >
          steps.csources-cache.outputs.cache-hit != 'true' &&
          steps.nim-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          repository: nim-lang/csources
          path: csources
          ref: ${{ steps.versions.outputs.csources }}

      - name: Checkout Nim
        if: steps.nim-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          repository: nim-lang/Nim
          path: nim
          ref: ${{ steps.versions.outputs.nim }}

      - name: Build Nim and associated tools
        if: steps.nim-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          ncpu=
          ext=
          case '${{ runner.os }}' in
          'Linux')
            ncpu=$(nproc)
            ;;
          'macOS')
            ncpu=$(sysctl -n hw.ncpu)
            ;;
          'Windows')
            ncpu=$NUMBER_OF_PROCESSORS
            ext=.exe
            ;;
          esac
          [[ -z "$ncpu" || $ncpu -le 0 ]] && ncpu=1
          if [[ ! -e csources/bin/nim$ext ]]; then
            make -C csources -j $ncpu CC=gcc ucpu='${{ matrix.target.cpu }}'
          else
            echo 'Using prebuilt csources'
          fi
          cp -v csources/bin/nim$ext nim/bin
          cd nim
          nim c koch
          ./koch boot -d:release
          ./koch tools -d:release
          # clean up to save cache space
          rm koch
          rm -rf nimcache
          rm -rf dist
          rm -rf .git

      # - name: Install library dependencies (Linux amd64)
      #   if: runner.os == 'Linux' && matrix.target.cpu == 'amd64'
      #   run: |
      #     sudo DEBIAN_FRONTEND='noninteractive' apt-get install \
      #       --no-install-recommends -yq libgmp-dev
      #
      # - name: Install library dependencies (Linux i386)
      #   if: runner.os == 'Linux' && matrix.target.cpu == 'i386'
      #   run: |
      #     sudo DEBIAN_FRONTEND='noninteractive' apt-get install \
      #       libgmp-dev:i386
      #
      # - name: Install library dependencies (macOS)
      #   if: runner.os == 'macOS'
      #   run: brew install gmp
      #
      # - name: Install library dependencies (Windows)
      #   if: runner.os == 'Windows'
      #   shell: bash
      #   run: |
      #       choco install msys2
      #       pacman -S mingw-w64-x86_64-gmp

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: '^1.15.5'

      - name: Install p2pd
        shell: bash
        run: |
          cd nim-libp2p
          V=1 bash scripts/build_p2pd.sh p2pdCache v0.3.0

      - name: Run nim-libp2p tests
        shell: bash
        run: |
          export UCPU="$cpu"
          cd nim-libp2p
          nimble install -y --depsOnly
          nimble test

  bumpNBC-stable:
    if: github.ref == 'refs/heads/master'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: status-im/github-app-token@v1
        name: Generate token
        id: generate-token
        with:
          app_id: ${{ secrets.BUMP_BOT_APP_ID }}
          private_key: ${{ secrets.BUMP_BOT_APP_PRIVATE_KEY }}

      - name: Clone NBC
        uses: actions/checkout@v2
        with:
          repository: status-im/nimbus-eth2
          ref: unstable
          path: nbc
          submodules: true
          fetch-depth: 0

      - name: Checkout this ref
        run: |
          cd nbc/vendor/nim-libp2p
          git checkout $GITHUB_SHA

      - name: Commit this bump
        run: |
          cd nbc
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git config --global user.name = "${{ github.actor }}"
          git commit -a -m "auto-bump nim-libp2p"

      - name: Make PR
        uses: peter-evans/create-pull-request@v3.5.0
        with:
          branch: nim-libp2p-auto-bump
          path: nbc
          token: ${{ steps.generate-token.outputs.token }}
          title: nim-libp2p auto bump

  bumpNBC-unstable:
    if: github.ref == 'refs/heads/unstable'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: status-im/github-app-token@v1
        name: Generate token
        id: generate-token
        with:
          app_id: ${{ secrets.BUMP_BOT_APP_ID }}
          private_key: ${{ secrets.BUMP_BOT_APP_PRIVATE_KEY }}

      - name: Clone NBC
        uses: actions/checkout@v2
        with:
          repository: status-im/nimbus-eth2
          ref: unstable
          path: nbc
          submodules: true
          fetch-depth: 0

      - name: Checkout this ref
        run: |
          cd nbc/vendor/nim-libp2p
          git checkout $GITHUB_SHA

      - name: Commit this bump
        run: |
          cd nbc
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git config --global user.name = "${{ github.actor }}"
          git commit -a -m "auto-bump nim-libp2p"

      - name: Make PR
        uses: peter-evans/create-pull-request@v3.5.0
        with:
          branch: nim-libp2p-auto-bump-unstable
          path: nbc
          token: ${{ steps.generate-token.outputs.token }}
          title: nim-libp2p unstable auto bump
          draft: true
